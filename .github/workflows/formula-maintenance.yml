name: Formula Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC to check for updates
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update to (optional)'
        required: false
        type: string
      force_update:
        description: 'Force update even if version is the same'
        required: false
        type: boolean
        default: false
  repository_dispatch:
    types: [update-formula]

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      should_update: ${{ steps.version-check.outputs.should_update }}
      latest_version: ${{ steps.version-check.outputs.latest_version }}
      current_version: ${{ steps.version-check.outputs.current_version }}
      download_url: ${{ steps.version-check.outputs.download_url }}
      sha256: ${{ steps.version-check.outputs.sha256 }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for version updates
      id: version-check
      run: |
        # Extract current version from formula
        CURRENT_VERSION=$(grep -o 'version "[^"]*"' Formula/amx-coder.rb | cut -d'"' -f2)
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check for latest version from releases or S3
        # For now, using manual input or repository dispatch
        if [[ "${{ github.event.inputs.version }}" != "" ]]; then
          LATEST_VERSION="${{ github.event.inputs.version }}"
        elif [[ "${{ github.event.client_payload.version }}" != "" ]]; then
          LATEST_VERSION="${{ github.event.client_payload.version }}"
        else
          # Try to get latest version from GitHub releases
          LATEST_VERSION=$(curl -s https://api.github.com/repos/aimatrix/amx-coder/releases/latest | jq -r '.tag_name // empty' | sed 's/^v//')
          if [[ -z "$LATEST_VERSION" ]]; then
            LATEST_VERSION="$CURRENT_VERSION"
          fi
        fi
        
        echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        
        # Determine if we should update
        SHOULD_UPDATE="false"
        if [[ "$LATEST_VERSION" != "$CURRENT_VERSION" ]] || [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
          SHOULD_UPDATE="true"
        fi
        echo "should_update=$SHOULD_UPDATE" >> $GITHUB_OUTPUT
        
        # Construct download URL
        DOWNLOAD_URL="https://public.aimatrix.com/dist/amx-coder/public/amx-coder-${LATEST_VERSION}.tar.gz"
        echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
        
        echo "Current version: $CURRENT_VERSION"
        echo "Latest version: $LATEST_VERSION"
        echo "Should update: $SHOULD_UPDATE"
        echo "Download URL: $DOWNLOAD_URL"

  calculate-sha256:
    runs-on: ubuntu-latest
    needs: check-for-updates
    if: needs.check-for-updates.outputs.should_update == 'true'
    outputs:
      sha256: ${{ steps.calc-sha256.outputs.sha256 }}
    steps:
    - name: Download and calculate SHA256
      id: calc-sha256
      run: |
        DOWNLOAD_URL="${{ needs.check-for-updates.outputs.download_url }}"
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Download the file
        curl -L -o amx-coder.tar.gz "$DOWNLOAD_URL"
        
        # Calculate SHA256
        SHA256=$(sha256sum amx-coder.tar.gz | cut -d' ' -f1)
        echo "sha256=$SHA256" >> $GITHUB_OUTPUT
        echo "Calculated SHA256: $SHA256"

  update-formula:
    runs-on: ubuntu-latest
    needs: [check-for-updates, calculate-sha256]
    if: needs.check-for-updates.outputs.should_update == 'true'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
    - name: Update formula
      run: |
        LATEST_VERSION="${{ needs.check-for-updates.outputs.latest_version }}"
        DOWNLOAD_URL="${{ needs.check-for-updates.outputs.download_url }}"
        SHA256="${{ needs.calculate-sha256.outputs.sha256 }}"
        
        echo "Updating formula to version $LATEST_VERSION"
        echo "Download URL: $DOWNLOAD_URL"
        echo "SHA256: $SHA256"
        
        # Update the formula file
        sed -i "s/version \"[^\"]*\"/version \"$LATEST_VERSION\"/" Formula/amx-coder.rb
        sed -i "s|url \"[^\"]*\"|url \"$DOWNLOAD_URL\"|" Formula/amx-coder.rb
        sed -i "s/sha256 \"[^\"]*\"/sha256 \"$SHA256\"/" Formula/amx-coder.rb
        
        echo "Updated formula:"
        cat Formula/amx-coder.rb
        
    - name: Test formula
      run: |
        # Install Homebrew for testing
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
        
        # Add our tap locally
        brew tap aimatrix/tap $(pwd)
        
        # Install dependencies
        brew install openjdk@17 gradle
        
        # Test the formula (dry run)
        brew install --dry-run amx-coder || true
        
        echo "Formula test completed"
        
    - name: Commit and push changes
      run: |
        LATEST_VERSION="${{ needs.check-for-updates.outputs.latest_version }}"
        
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git add Formula/amx-coder.rb
        git commit -m "🤖 Auto-update amx-coder to v$LATEST_VERSION

        - Updated version to $LATEST_VERSION
        - Updated download URL
        - Updated SHA256 checksum: ${{ needs.calculate-sha256.outputs.sha256 }}
        
        This update was automatically generated by the formula maintenance workflow."
        
        git push origin main
        
    - name: Create release notes
      if: success()
      run: |
        LATEST_VERSION="${{ needs.check-for-updates.outputs.latest_version }}"
        CURRENT_VERSION="${{ needs.check-for-updates.outputs.current_version }}"
        
        echo "## Formula Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Successfully updated amx-coder formula**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous version**: $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **New version**: $LATEST_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **SHA256**: ${{ needs.calculate-sha256.outputs.sha256 }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Download URL**: ${{ needs.check-for-updates.outputs.download_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "brew tap aimatrix/tap" >> $GITHUB_STEP_SUMMARY
        echo "brew install amx-coder" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY

  test-installation:
    runs-on: macos-latest
    needs: [check-for-updates, update-formula]
    if: needs.check-for-updates.outputs.should_update == 'true'
    steps:
    - name: Wait for formula update
      run: sleep 30
      
    - name: Test installation on macOS
      run: |
        # Add the tap
        brew tap aimatrix/tap
        
        # Install the package
        brew install amx-coder
        
        # Test basic functionality
        amx-coder --version
        amx-coder --help
        
        echo "✅ Installation test passed on macOS"

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: [check-for-updates, calculate-sha256, update-formula, test-installation]
    if: always() && (needs.calculate-sha256.result == 'failure' || needs.update-formula.result == 'failure' || needs.test-installation.result == 'failure')
    steps:
    - name: Create failure summary
      run: |
        echo "## ❌ Formula Update Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The automatic formula update encountered an error:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Target version**: ${{ needs.check-for-updates.outputs.latest_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Download URL**: ${{ needs.check-for-updates.outputs.download_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Check for updates: ${{ needs.check-for-updates.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Calculate SHA256: ${{ needs.calculate-sha256.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Update formula: ${{ needs.update-formula.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Test installation: ${{ needs.test-installation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please check the workflow logs and update the formula manually if needed." >> $GITHUB_STEP_SUMMARY